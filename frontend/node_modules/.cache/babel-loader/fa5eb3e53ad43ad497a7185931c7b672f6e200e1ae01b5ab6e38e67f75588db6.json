{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\New folder (2)\\\\example-six-maxmulin\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvent() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //setError('Fetching events failed.')\n    //return {isError: true, message:'Could not fetch events'}\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\n    // {status:500})\n    return json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n    //   const resData = await response.json()\n    //   //setFetchedEvents(resData.events)\n    //   return resData.events\n  }\n}\nexport function loader() {\n  return defer({\n    event: loadEvent()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvent","response","fetch","ok","status","loader","event","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/New folder (2)/example-six-maxmulin/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["\r\nimport {json, useLoaderData, defer} from 'react-router-dom'\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n\r\nconst data = useLoaderData()  \r\nif(data.isError){\r\n  return <p>{data.message}</p>\r\n}\r\nconst events = data.events\r\nreturn (\r\n    <>\r\n      {/* <div style={{ textAlign: 'center' }}>\r\n        {isLoading && <p>Loading...</p>}\r\n        {error && <p>{error}</p>}\r\n      </div>\r\n      {!isLoading && fetchedEvents &&  */}\r\n      <EventsList events={events} />\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage\r\n\r\nasync function loadEvent(){\r\n  const response = await fetch('http://localhost:8080/events')\r\n        if (!response.ok){\r\n          //setError('Fetching events failed.')\r\n          //return {isError: true, message:'Could not fetch events'}\r\n          // throw new Response(JSON.stringify({message:'Could not fetch events'}),\r\n          // {status:500})\r\n          return json(\r\n            {message:'Could not fetch events'},{\r\n            status:500\r\n          })\r\n        }else{\r\n            return response\r\n        //   const resData = await response.json()\r\n        //   //setFetchedEvents(resData.events)\r\n        //   return resData.events\r\n        }\r\n}\r\n\r\nexport function loader(){\r\n  return defer({\r\n    event: loadEvent()\r\n  })\r\n}"],"mappings":";;AACA,SAAQA,IAAI,EAAEC,aAAa,EAAEC,KAAK,QAAO,kBAAkB;AAC3D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEtB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;EAC5B,IAAGS,IAAI,CAACC,OAAO,EAAC;IACd,oBAAON,OAAA;MAAAO,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAC1B,oBACIb,OAAA,CAAAE,SAAA;IAAAK,QAAA,eAMEP,OAAA,CAACF,UAAU;MAACe,MAAM,EAAEA;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAE9B,CAAC;AAEP;AAACR,EAAA,CAlBQD,UAAU;EAAA,QAENP,aAAa;AAAA;AAAAkB,EAAA,GAFjBX,UAAU;AAoBnB,eAAeA,UAAU;AAEzB,eAAeY,SAASA,CAAA,EAAE;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EACtD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAC;IACf;IACA;IACA;IACA;IACA,OAAOvB,IAAI,CACT;MAACa,OAAO,EAAC;IAAwB,CAAC,EAAC;MACnCW,MAAM,EAAC;IACT,CAAC,CAAC;EACJ,CAAC,MAAI;IACD,OAAOH,QAAQ;IACnB;IACA;IACA;EACA;AACR;AAEA,OAAO,SAASI,MAAMA,CAAA,EAAE;EACtB,OAAOvB,KAAK,CAAC;IACXwB,KAAK,EAAEN,SAAS,CAAC;EACnB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}