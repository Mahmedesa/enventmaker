{"ast":null,"code":"import { useRouteLoaderData, json, redirect, defer, Await } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nasync function loadEvent(id) {\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch for selected event\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.event;\n  }\n}\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //setError('Fetching events failed.')\n    //return {isError: true, message:'Could not fetch events'}\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\n    // {status:500})\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  return defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n}\nexport async function action(params, request) {\n  const eventId = params.eventId;\n  const response = fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete event\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}","map":{"version":3,"names":["useRouteLoaderData","json","redirect","defer","Await","EventItem","EventsList","Suspense","loadEvent","id","response","fetch","ok","message","status","resData","event","loadEvents","events","loader","request","params","eventId","action","method"],"sources":["C:/Users/DELL/Desktop/New folder (2)/example-six-maxmulin/12-adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import {\r\n  useRouteLoaderData,\r\n  json,\r\n  redirect,\r\n  defer,\r\n  Await,\r\n} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\nimport { Suspense } from \"react\";\r\n\r\nasync function loadEvent(id) {\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch for selected event\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.event;\r\n  }\r\n}\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    //setError('Fetching events failed.')\r\n    //return {isError: true, message:'Could not fetch events'}\r\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\r\n    // {status:500})\r\n    throw json(\r\n      { message: \"Could not fetch events\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n  return defer({\r\n    event: loadEvent(id),\r\n    events: loadEvents(),\r\n  });\r\n}\r\nexport async function action(params, request) {\r\n  const eventId = params.eventId;\r\n  const response = fetch(\"http://localhost:8080/events/\" + eventId, {\r\n    method: request.method,\r\n  });\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not delete event\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  }\r\n  return redirect(\"/events\");\r\n}\r\n"],"mappings":"AAAA,SACEA,kBAAkB,EAClBC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACLC,KAAK,QACA,kBAAkB;AACzB,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAEhC,eAAeC,SAASA,CAACC,EAAE,EAAE;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,CAAC;EAClE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAAqC,CAAC,EACjD;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACT,IAAI,CAAC,CAAC;IACrC,OAAOc,OAAO,CAACC,KAAK;EACtB;AACF;AAEA,eAAeC,UAAUA,CAAA,EAAG;EAC1B,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACT,IAAI,CAAC,CAAC;IACrC,OAAOc,OAAO,CAACG,MAAM;EACvB;AACF;AAEA,OAAO,eAAeC,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMZ,EAAE,GAAGY,MAAM,CAACC,OAAO;EACzB,OAAOnB,KAAK,CAAC;IACXa,KAAK,EAAER,SAAS,CAACC,EAAE,CAAC;IACpBS,MAAM,EAAED,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AACA,OAAO,eAAeM,MAAMA,CAACF,MAAM,EAAED,OAAO,EAAE;EAC5C,MAAME,OAAO,GAAGD,MAAM,CAACC,OAAO;EAC9B,MAAMZ,QAAQ,GAAGC,KAAK,CAAC,+BAA+B,GAAGW,OAAO,EAAE;IAChEE,MAAM,EAAEJ,OAAO,CAACI;EAClB,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH;EACA,OAAOZ,QAAQ,CAAC,SAAS,CAAC;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}