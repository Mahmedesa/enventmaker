{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\New folder (2)\\\\example-six-maxmulin\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return;\n  /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvent => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadedEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 4\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadedEvent() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //setError('Fetching events failed.')\n    //return {isError: true, message:'Could not fetch events'}\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\n    // {status:500})\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvent()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvent","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","loadEvent","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/New folder (2)/example-six-maxmulin/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { json, useLoaderData, defer, Await } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const {events} = useLoaderData();\r\n  return\r\n   <Await resolve={events}>\r\n    {(loadedEvent)=> <EventsList events={loadedEvent} /> }\r\n  </Await> ;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadedEvent() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    //setError('Fetching events failed.')\r\n    //return {isError: true, message:'Could not fetch events'}\r\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\r\n    // {status:500})\r\n    throw json(\r\n      { message: \"Could not fetch events\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return defer({\r\n    events: loadEvent(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGR,aAAa,CAAC,CAAC;EAChC;EACC,aAAAK,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EACpBC,WAAW,iBAAIN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AACV;AAACR,EAAA,CANQD,UAAU;EAAA,QACAN,aAAa;AAAA;AAAAgB,EAAA,GADvBV,UAAU;AAQnB,eAAeA,UAAU;AAEzB,eAAeK,WAAWA,CAAA,EAAG;EAC3B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMpB,IAAI,CACR;MAAEqB,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOrB,KAAK,CAAC;IACXO,MAAM,EAAEe,SAAS,CAAC;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAP,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}