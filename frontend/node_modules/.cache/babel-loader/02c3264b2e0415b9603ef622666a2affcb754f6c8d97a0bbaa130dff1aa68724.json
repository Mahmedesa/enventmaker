{"ast":null,"code":"var _s = $RefreshSig$();\nimport { json, useLoaderData, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return;\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvent() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //setError('Fetching events failed.')\n    //return {isError: true, message:'Could not fetch events'}\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\n    // {status:500})\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n    //   const resData = await response.json()\n    //   //setFetchedEvents(resData.events)\n    //   return resData.events\n  }\n}\nexport function loader() {\n  return defer({\n    event: loadEvent()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","defer","EventsList","EventsPage","_s","data","_c","loadEvent","response","fetch","ok","message","status","loader","event","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/New folder (2)/example-six-maxmulin/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { json, useLoaderData, defer } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  return \r\n  ;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvent() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    //setError('Fetching events failed.')\r\n    //return {isError: true, message:'Could not fetch events'}\r\n    // throw new Response(JSON.stringify({message:'Could not fetch events'}),\r\n    // {status:500})\r\n    throw json(\r\n      { message: \"Could not fetch events\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    return response;\r\n    //   const resData = await response.json()\r\n    //   //setFetchedEvents(resData.events)\r\n    //   return resData.events\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return defer({\r\n    event: loadEvent(),\r\n  });\r\n}\r\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,0BAA0B;AAEjD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGL,aAAa,CAAC,CAAC;EAC5B;AAEF;AAACI,EAAA,CAJQD,UAAU;EAAA,QACJH,aAAa;AAAA;AAAAM,EAAA,GADnBH,UAAU;AAMnB,eAAeA,UAAU;AAEzB,eAAeI,SAASA,CAAA,EAAG;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMX,IAAI,CACR;MAAEY,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;IACf;IACA;IACA;EACF;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOZ,KAAK,CAAC;IACXa,KAAK,EAAEP,SAAS,CAAC;EACnB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}